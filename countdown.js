// Generated by CoffeeScript 1.7.1
var builder;

builder = function(t, n) {
  var makeP, ops;
  this.ps = [];
  this.as = [];
  makeP = (function(_this) {
    return function(p) {
      var i, _i, _len;
      if (p.length < 6) {
        for (_i = 0, _len = n.length; _i < _len; _i++) {
          i = n[_i];
          if (p.indexOf(i) === -1) {
            makeP(p.concat(i));
          }
        }
      } else {
        ops([p, p]);
      }
    };
  })(this);
  ops = (function(_this) {
    return function(p) {
      var a, b, op, _i, _len, _ref;
      if (p[1].length > 1) {
        _ref = ['+', '-', '*', '/'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          op = _ref[_i];
          b = [p[0][p[0].length - 1], p[1][p[1].length - 1]];
          a = [p[0][p[0].length - 2], p[1][p[1].length - 2]];
          switch (op) {
            case '+':
              makeP([p[0].slice(0, p[0].length - 2).concat("" + a[0] + b[0] + "+", p[1].slice(0, p[1].length - 2).concat(a[1] + b[1]))]);
              break;
            case '-':
              makeP([p[0].slice(0, p[0].length - 2).concat("" + a[0] + b[0] + "-", p[1].slice(0, p[1].length - 2).concat(a[1] - b[1]))]);
              break;
            case '*':
              makeP([p[0].slice(0, p[0].length - 2).concat("" + a[0] + b[0] + "*", p[1].slice(0, p[1].length - 2).concat(a[1] * b[1]))]);
              break;
            case '/':
              if (a[1] / b[1] === (a[1] / b[1]) | 0) {
                makeP([p[0].slice(0, p[0].length - 2).concat("" + a[0] + b[0] + "/", p[1].slice(0, p[1].length - 2).concat(a[1] / b[1]))]);
              }
          }
        }
      } else if (p[1] === t) {
        _this.as.push(p[0].join(''));
      }
    };
  })(this);
  makeP([]);
  return this.as;
};
